
name: Setup
description: Does the initial setup
inputs:
  name:
    description: Project name
    required: true
  path:
    description: Project path
    required: true
outputs:
  python-version:
    description: The version of Python used in the setup
    value: ${{ steps.python-version.outputs.python_version }}
  uv-version:
    description: The version of uv used in the setup
    value: ${{ steps.uv-version.outputs.uv_version }}

runs:
  using: composite
  steps:
    - id: python-version
      name: Set Python version
      shell: sh
      run: echo "python_version=3.12" >> "$GITHUB_OUTPUT"

    - id: uv-version
      name: Set uv version
      shell: sh
      run: echo "uv_version=0.6.2" >> "$GITHUB_OUTPUT"
    
    - id: existing-python-version
      name: Get existing Python version
      shell: sh
      run: echo "existing_python_version=$(python --version)" >> "$GITHUB_OUTPUT"
    
    - id: uv-cache
      name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: os${{ runner.os }}-${{ runner.arch }}-python${{ steps.python-version.outputs.python_version }}-uv${{ steps.uv-version.outputs.uv_version }}

    - name: Install Python if the default version in the runner does not match
      uses: actions/setup-python@v5
      if: |
        ! startsWith(steps.existing-python-version.outputs.existing_python_version, format('Python {0}', steps.python-version.outputs.python_version))
      with:
        python-version: ${{ steps.python-version.outputs.python_version }}

    - id: install-uv
      name: Install uv
      shell: sh
      run: |
        pip install uv==${{ steps.uv-version.outputs.uv_version }}
    
    - uses: actions/cache@v4
      with:
        path: ${{ inputs.path }}/.venv
        key: os${{ runner.os }}-${{ runner.arch }}-python${{ steps.python-version.outputs.python_version }}-uv${{ steps.uv-version.outputs.uv_version }}-venv-${{ inputs.name }}-${{ hashFiles(format('{0}/pyproject.toml', inputs.path)) }}

    - name: Install dependencies
      working-directory: '${{ inputs.path }}'
      shell: sh
      run: |
        uv sync --all-groups
        uv sync --all-extras
    - name: Install ODBC driver
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        if ! [[ "20.04 22.04 24.04 24.10" == *"$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)"* ]];
        then
            echo "Ubuntu $(grep VERSION_ID /etc/os-release | cut -d '"' -f 2) is not currently supported.";
            exit;
        fi

        # Download the package to configure the Microsoft repo
        curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
        # Install the package
        sudo apt-get update
        sudo apt-get install -y ./packages-microsoft-prod.deb || true
        rm packages-microsoft-prod.deb

        # Install the driver
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
        # optional: for bcp and sqlcmd
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
        echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
        source ~/.bashrc
        # optional: for unixODBC development headers
        sudo apt-get install -y unixodbc-dev
    - name: Output versions
      shell: sh
      run: |
        echo "uv_version=${{ steps.uv-version.outputs.uv_version }}" >> "$GITHUB_OUTPUT"
        echo "python_version=${{ steps.python-version.outputs.python_version }}" >> "$GITHUB_OUTPUT"