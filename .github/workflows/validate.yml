
name: Validate
on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  validate:
    name: Validate ${{ matrix.python-version }} - ${{ matrix.os-name }}
    permissions:
      contents: read
    strategy:
      matrix:
       include:
        # Linux
        - os: ubuntu-latest
          os-name: 'linux'
          python-version: "3.11"
        - os: ubuntu-latest
          os-name: 'linux'
          python-version: "3.12"
        # Windows
        - os: windows-latest
          os-name: 'windows'
          python-version: "3.11"
        - os: windows-latest
          os-name: 'windows'
          python-version: "3.12"
        # MacOS
        - os: macos-latest
          os-name: 'macOS'
          python-version: "3.12"
      fail-fast: true
    runs-on: ${{ matrix.os }}
    env:
      LOG_LEVEL: DEBUG

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - id: install-uv
        name: Install uv
        shell: sh
        run: |
          pip install --no-cache-dir uv

      - name: Install dependencies
        shell: sh
        run: |
          uv sync --all-groups
          uv sync --all-extras
      
      - name: Install ODBC driver
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          if ! [[ "20.04 22.04 24.04 24.10" == *"$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)"* ]];
          then
              echo "Ubuntu $(grep VERSION_ID /etc/os-release | cut -d '"' -f 2) is not currently supported.";
              exit;
          fi
          # Download the package to configure the Microsoft repo
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
          # Install the package
          sudo apt-get update
          sudo apt-get install -y ./packages-microsoft-prod.deb || true
          rm packages-microsoft-prod.deb
          # Install the driver
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          # optional: for bcp and sqlcmd
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          # optional: for unixODBC development headers
          sudo apt-get install -y unixodbc-dev
      # macOS
      - name: Install ODBC driver (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release
          brew update
          echo YES | ACCEPT_EULA=Y brew install msodbcsql18 mssql-tools18
          echo 'export PATH="$PATH:/usr/local/bin"' >> ~/.bash_profile
          source ~/.bash_profile
      # Windows
      - name: Install ODBC driver (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://go.microsoft.com/fwlink/?linkid=2285634 -OutFile msodbcsql.msi
          Start-Process msiexec.exe -ArgumentList '/i msodbcsql.msi /quiet /qn /norestart IACCEPTMSODBCSQLLICENSETERMS=YES' -Wait
          Remove-Item msodbcsql.msi

      - name: Run Unit tests
        env:
          PYTEST_MARKER: "not requires_service"
        id: tests
        run: uv run hatch run test-no-service
        continue-on-error: false
      
  test-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: my_sap_bronze
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          MSSQL_SA_PASSWORD: "Password123!"
          ACCEPT_EULA: "Y"
          MSSQL_PID: 'Developer'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install uv
        run: |
          pip install --no-cache-dir uv

      - name: Install dependencies
        shell: sh
        run: |
          uv sync --all-groups
          uv sync --all-extras
      
      - name: Install ODBC driver
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          if ! [[ "20.04 22.04 24.04 24.10" == *"$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)"* ]];
          then
              echo "Ubuntu $(grep VERSION_ID /etc/os-release | cut -d '"' -f 2) is not currently supported.";
              exit;
          fi

          # Download the package to configure the Microsoft repo
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
          # Install the package
          sudo apt-get update
          sudo apt-get install -y ./packages-microsoft-prod.deb || true
          rm packages-microsoft-prod.deb

          # Install the driver
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          # optional: for bcp and sqlcmd
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          # optional: for unixODBC development headers
          sudo apt-get install -y unixodbc-dev

      - name: Run Unit tests
        id: tests
        run: uv run hatch test tests --cover
        continue-on-error: false

      - name: Run lint
        id: lint
        run: uv run hatch run test-lint
        continue-on-error: false